<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
/**
 * @file
 * Functions to support theming in the psyplay theme.
 */

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
/*function psyplay_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#theme']) && is_array($variables['element']['#theme'])) {
    foreach ($variables['element']['#theme'] as $theme) {
      if (strpos($theme, '_edit_') !== FALSE) {
        $suggestions[] = 'form__' . str_replace('_edit_', '_', $theme);
      }
      $suggestions[] = 'form__'  . $theme;
    }
  }
}*/
/**
 * Implements hook_page_attachments_alter
 */
function psyplay_page_attachments_alter(array &$page) {
 
  // Get current path
  $route = \Drupal::routeMatch()->getRouteName();
  //print $route;
  $path = \Drupal::service('path.current')->getPath();
  $arg  = explode('/',$path);
//print_r($arg);
  // If we're on the node listing page, add our simple library.
  if ($arg[1] == 'user') {
   // $page['#attached']['library'][] = 'claro/global-styling';
  }
}




/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function psyplay_preprocess_html(array &$variables) {
   $url_options = [
    'absolute' => TRUE,
    'language' => \Drupal::languageManager()->getCurrentLanguage(),
  ];
    $variables['site_url'] = Url::fromRoute('<front>', [], $url_options)->toString();
  $variables['base_path'] = base_path();
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function psyplay_page_attachments_alter2(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function psyplay_preprocess_page(array &$variables) {
  $site_config = \Drupal::config('system.site');
  $url_options = [
    'absolute' => TRUE,
    'language' => \Drupal::languageManager()->getCurrentLanguage(),
  ];
    $variables['site_url'] = Url::fromRoute('<front>', [], $url_options)->toString();
    $variables['base_path'] = base_path();
    $variables['site_name'] = $site_config->get('name');
    $variables['site_slogan'] = $site_config->get('slogan');
    $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
    $variables['new_domain_name'] = theme_get_setting('new_domain_name');
    $variables['iframe_new_domain_name'] = theme_get_setting('facebook_url');
    
}


/**
 * Implements hook_theme_suggestions_page_alter().
 */
function psyplay_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function psyplay_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

function psyplay_suggestions_block_alter(&$suggestions, $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}
/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function psyplay_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function psyplay_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function psyplay_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function psyplay_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function psyplay_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function psyplay_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function psyplay_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function psyplay_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function psyplay_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function psyplay_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function psyplay_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
